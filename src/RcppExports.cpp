// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Ccoalesce_by
List Ccoalesce_by(List x, IntegerVector rows, CharacterVector names);
RcppExport SEXP _dtutils_Ccoalesce_by(SEXP xSEXP, SEXP rowsSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(Ccoalesce_by(x, rows, names));
    return rcpp_result_gen;
END_RCPP
}
// Ccumsum_by
List Ccumsum_by(List x, IntegerVector rows);
RcppExport SEXP _dtutils_Ccumsum_by(SEXP xSEXP, SEXP rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rows(rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(Ccumsum_by(x, rows));
    return rcpp_result_gen;
END_RCPP
}
// Ccumprod_by
List Ccumprod_by(List x, IntegerVector rows);
RcppExport SEXP _dtutils_Ccumprod_by(SEXP xSEXP, SEXP rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rows(rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(Ccumprod_by(x, rows));
    return rcpp_result_gen;
END_RCPP
}
// Cna_fill_by
List Cna_fill_by(List x, IntegerVector rows, unsigned int type, bool inplace, RObject fill);
RcppExport SEXP _dtutils_Cna_fill_by(SEXP xSEXP, SEXP rowsSEXP, SEXP typeSEXP, SEXP inplaceSEXP, SEXP fillSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type inplace(inplaceSEXP);
    Rcpp::traits::input_parameter< RObject >::type fill(fillSEXP);
    rcpp_result_gen = Rcpp::wrap(Cna_fill_by(x, rows, type, inplace, fill));
    return rcpp_result_gen;
END_RCPP
}
// Crow_number_by
IntegerVector Crow_number_by(R_xlen_t n, IntegerVector rows);
RcppExport SEXP _dtutils_Crow_number_by(SEXP nSEXP, SEXP rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< R_xlen_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rows(rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(Crow_number_by(n, rows));
    return rcpp_result_gen;
END_RCPP
}
// Cfirst_by
LogicalVector Cfirst_by(R_xlen_t n, IntegerVector rows);
RcppExport SEXP _dtutils_Cfirst_by(SEXP nSEXP, SEXP rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< R_xlen_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rows(rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(Cfirst_by(n, rows));
    return rcpp_result_gen;
END_RCPP
}
// Clast_by
LogicalVector Clast_by(R_xlen_t n, IntegerVector rows);
RcppExport SEXP _dtutils_Clast_by(SEXP nSEXP, SEXP rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< R_xlen_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rows(rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(Clast_by(n, rows));
    return rcpp_result_gen;
END_RCPP
}
// Cany_by
LogicalVector Cany_by(LogicalVector x, IntegerVector rows);
RcppExport SEXP _dtutils_Cany_by(SEXP xSEXP, SEXP rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rows(rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(Cany_by(x, rows));
    return rcpp_result_gen;
END_RCPP
}
// Call_by
LogicalVector Call_by(LogicalVector x, IntegerVector rows);
RcppExport SEXP _dtutils_Call_by(SEXP xSEXP, SEXP rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rows(rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(Call_by(x, rows));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dtutils_Ccoalesce_by", (DL_FUNC) &_dtutils_Ccoalesce_by, 3},
    {"_dtutils_Ccumsum_by", (DL_FUNC) &_dtutils_Ccumsum_by, 2},
    {"_dtutils_Ccumprod_by", (DL_FUNC) &_dtutils_Ccumprod_by, 2},
    {"_dtutils_Cna_fill_by", (DL_FUNC) &_dtutils_Cna_fill_by, 5},
    {"_dtutils_Crow_number_by", (DL_FUNC) &_dtutils_Crow_number_by, 2},
    {"_dtutils_Cfirst_by", (DL_FUNC) &_dtutils_Cfirst_by, 2},
    {"_dtutils_Clast_by", (DL_FUNC) &_dtutils_Clast_by, 2},
    {"_dtutils_Cany_by", (DL_FUNC) &_dtutils_Cany_by, 2},
    {"_dtutils_Call_by", (DL_FUNC) &_dtutils_Call_by, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_dtutils(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
